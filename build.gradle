//file:noinspection GradlePackageVersionRange
import proguard.gradle.ProGuardTask
import org.apache.commons.io.FilenameUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.2.1'
        classpath 'com.guardsquare:proguard-base:7.2.1'
    }
}

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.mod_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://maven.parchmentmc.org' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/' }
    maven { url 'https://jitpack.io/' }
    maven {
        url 'https://api.modrinth.com/maven'
        content { includeGroup "maven.modrinth" }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") { transitive false }

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${project.minecraft_version}"
    modImplementation "maven.modrinth:cem:${project.cem_version}"
    modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
}

// Using remote repo as mod site if project.mod_url is missing

def url

if (project.hasProperty("mod_url")) url = project.mod_url else {
    final process = 'git ls-remote --get-url'.execute()
    process.waitFor()
    url = process.text.trim()
}

// Format fabric.mod.json

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "mod_name": project.mod_name,
                "mod_url": url
    }
}

remapJar {
    from "LICENSE"
}

task proguard(type: ProGuardTask) {
    dependsOn(remapJar)

    configuration "${projectDir}/optimize.pro"
    injars remapJar.archiveFile
    outjars FilenameUtils.removeExtension(remapJar.archiveFile.get().toString()) + "-optimized" + ".jar"

    libraryjars(project.configurations.modImplementation.files)
    libraryjars(project.configurations.modApi.files)
}

compileJava {
    options.compilerArgs << '-Xlint'
}